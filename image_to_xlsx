import os
import re
import pandas as pd
from paddleocr import PaddleOCR
from tqdm import tqdm
import numpy as np
import cv2

# --- 사용자가 수정할 수 있는 설정값 ---
IMAGE_FOLDER_PATH = r"D:\Download\CODE\flutter\STVF_5" 
OUTPUT_EXCEL_PATH = r"D:\Download\CODE\flutter\STVF_5\STVF_5_error_code.xlsx"

# --- OCR 모델 로딩 ---
try:
    print("PaddleOCR 모델을 로딩 중입니다...")
    ocr = PaddleOCR(lang='korean', use_textline_orientation=True) 
    print("모델 로딩 완료.")
except Exception as e:
    print(f"PaddleOCR 모델 로딩 중 치명적 오류가 발생했습니다: {e}")
    exit()

def extract_ocr_info(full_text):
    """OCR로 추출된 전체 텍스트에서 모든 정보를 뽑아냅니다."""
    # 이제 ERROR CODE도 이미지 안에서 찾습니다.
    patterns = {
        'ERROR CODE': re.compile(r"ERROR\s*CODE\s*명\s*[:]?\s*(\S+)"),
        '검출 FLAG': re.compile(r"검출\s*FLAG\s*[:]?\s*(\S+)"),
        '관련도면': re.compile(r"관련도면\s*[:]?\s*(\S+)")
    }
    extracted = {}
    for key, pattern in patterns.items():
        match = pattern.search(full_text)
        extracted[key] = match.group(1) if match else None # 값을 못 찾으면 빈 칸(None)으로 처리
    return extracted

def main():
    if not os.path.isdir(IMAGE_FOLDER_PATH):
        print(f"오류: 이미지 폴더를 찾을 수 없습니다 - '{IMAGE_FOLDER_PATH}'")
        return
        
    output_dir = os.path.dirname(OUTPUT_EXCEL_PATH)
    os.makedirs(output_dir, exist_ok=True)

    image_files = [f for f in os.listdir(IMAGE_FOLDER_PATH) if f.lower().endswith('.png')]
    if not image_files:
        print(f"오류: '{IMAGE_FOLDER_PATH}' 폴더에 PNG 이미지가 없습니다.")
        return
    print(f"총 {len(image_files)}개의 이미지 파일을 대상으로 OCR을 시작합니다.")
    
    all_results = []
    for filename in tqdm(image_files, desc="이미지 처리 중"):
        try:
            # --- 1. 파일명에서 정보 파싱 ---
            clean_filename = filename.rsplit('.png', 1)[0]
            parts = clean_filename.split('_', 2)
            error_code_from_filename = parts[0] if len(parts) >= 1 else "파싱 실패"
            title = parts[2] if len(parts) == 3 else "제목 없음"
            
            # --- 2. 이미지 읽기 ---
            image_path = os.path.join(IMAGE_FOLDER_PATH, filename)
            img_array = np.fromfile(image_path, np.uint8)
            img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)

            if img is None:
                print(f"\n[경고] 파일 '{filename}'을 이미지로 변환할 수 없습니다.")
                continue

            # --- 3. OCR 실행 ---
            result = ocr.predict(img)

            # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
            # ★★★ 핵심 수정: result[0]['rec_texts'] 로 정확하게 접근합니다. ★★★
            # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
            full_text = ""
            # result가 비어있지 않고, 그 첫 번째 원소(딕셔너리)도 있고,
            # 그 안에 'rec_texts' 키가 있는지 모두 확인
            if result and result[0] and 'rec_texts' in result[0]:
                text_list = result[0]['rec_texts']
                full_text = "\n".join(text_list)
            
            # --- 4. OCR 텍스트에서 정보 추출 ---
            ocr_info = extract_ocr_info(full_text)

            # --- 5. 최종 결과 조합 ---
            # ERROR CODE는 파일명에서 가져온 것을 우선으로 사용.
            # 만약 OCR 결과가 더 정확하다면, ocr_info.get('ERROR CODE')를 사용해도 됩니다.
            final_row = {
                'ERROR CODE': error_code_from_filename,
                '제목': title,
                '검출 FLAG': ocr_info.get('검출 FLAG'),
                '관련도면': ocr_info.get('관련도면')
            }
            all_results.append(final_row)
            
        except Exception as e:
            print(f"\n파일 '{filename}' 처리 중 오류 발생: {e}")

    if not all_results:
        print("처리된 결과가 없어 Excel 파일을 생성하지 않습니다.")
        return

    # --- 6. 모든 결과를 Excel 파일로 저장 ---
    print("\nOCR 처리 완료. 결과를 Excel 파일로 저장합니다...")
    try:
        df = pd.DataFrame(all_results)
        df = df[['ERROR CODE', '제목', '검출 FLAG', '관련도면']]
        df.to_excel(OUTPUT_EXCEL_PATH, index=False, engine='openpyxl')
        print(f"성공! 결과가 '{OUTPUT_EXCEL_PATH}'에 저장되었습니다.")
    except Exception as e:
        print(f"Excel 파일 저장 중 오류 발생: {e}")

if __name__ == "__main__":
    main()

# import os
# from paddleocr import PaddleOCR
# import numpy as np
# import cv2
# import pprint # 딕셔너리나 리스트를 예쁘게 출력하기 위해 임포트합니다.

# # --- 1. 디버깅할 파일 하나만 지정 ---
# IMAGE_FOLDER_PATH = r"D:\Download\CODE\flutter\STVF_5" 
# DEBUG_FILENAME = "F11_F1_정지 중 안전회로 이상 동작 ERROR.png"

# # --- 2. OCR 모델 로딩 ---
# try:
#     print("PaddleOCR 모델을 로딩 중입니다...")
#     ocr = PaddleOCR(lang='korean', use_textline_orientation=True) 
#     print("모델 로딩 완료.")
# except Exception as e:
#     print(f"PaddleOCR 모델 로딩 중 치명적 오류가 발생했습니다: {e}")
#     exit()

# def debug_single_image_ocr():
#     """오직 한 개의 이미지 파일에 대해 OCR을 실행하고 원본 결과를 출력합니다."""
    
#     image_path = os.path.join(IMAGE_FOLDER_PATH, DEBUG_FILENAME)
    
#     if not os.path.exists(image_path):
#         print(f"\n[오류] 디버깅할 파일을 찾을 수 없습니다: {image_path}")
#         return

#     print(f"\n--- 디버깅 대상 파일 ---")
#     print(image_path)
    
#     # --- 3. 이미지 파일 읽기 (한글 경로 문제 해결 방식) ---
#     try:
#         print("\n--- 이미지 파일 읽기 시도 ---")
#         img_array = np.fromfile(image_path, np.uint8)
#         img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
#         if img is None:
#             print("[오류] OpenCV가 이미지를 제대로 읽지 못했습니다.")
#             return
#         print("이미지 읽기 성공.")
#     except Exception as e:
#         print(f"[오류] 이미지 파일 읽는 중 예외 발생: {e}")
#         return

#     # --- 4. OCR 실행 및 결과 출력 ---
#     try:
#         print("\n--- OCR 실행 ---")
#         result = ocr.predict(img)
        
#         print("\n==========================================================")
#         print("          PaddleOCR가 반환한 '날것' 그대로의 결과")
#         print("     (이것이 이미지 전체에서 인식된 실제 데이터입니다)")
#         print("==========================================================")
        
#         # pprint를 사용하여 딕셔너리나 리스트 구조를 보기 좋게 출력합니다.
#         pprint.pprint(result)
        
#         print("\n==========================================================")

#     except Exception as e:
#         print(f"\n[오류] OCR 실행 중 예외가 발생했습니다: {e}")

#     print("\n디버깅 완료.")


# if __name__ == "__main__":
#     debug_single_image_ocr()
